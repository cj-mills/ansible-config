---

# tasks to complete before running roles
- hosts: localhost
  connection: local
  vars_files:
    - vars.yml
  # enable sudo
  become: true
  pre_tasks:
    - name: pre-run | Install aptitude and update package cache (debian, etc)
      tags: always
      apt: name=aptitude state=latest update_cache=true
      when: ansible_distribution in ["Debian", "Ubuntu"]
      
  tasks:
  - name: Install packages
    # Use the package module ot install packages
    apt:
      name:
        - wget
        - gpg
        - git
        - git-lfs
        - htop
        - iotop
        - curl
        - apt-transport-https
        - imagemagick
        - tmux
        # Need this for the dconf module
        - python3-psutil
        - ca-certificates
        - software-properties-common
        - virtualenv
        - python3-setuptools
      state: latest
      update_cache: true
  
  # Customize bash prompt
  - name: Customize bash prompt
    lineinfile:
      path: "{{ home }}/.bashrc"
      regexp: "^    PS1='\\${debian_chroot:\\+\\(\\$debian_chroot\\)}\\\\\\[\\\\033\\[01;32m\\\\\\]\\\\u@\\\\h\\\\\\[\\\\033\\[00m\\\\\\]:\\\\\\[\\\\033\\[01;34m\\\\\\]\\\\w\\\\\\[\\\\033\\[00m\\\\\\]\\\\\\$ '"
      line: "    PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\n\\$ '"
      backup: true
        
  # Install VS Code
  - name: install VS Code key (apt)
    become: true
    apt_key:
      url: '{{ visual_studio_code_mirror }}/keys/microsoft.asc'
      state: present

  - name: install VS Code repo (apt)
    become: true
    apt_repository:
      repo: 'deb [arch=amd64{{ visual_studio_code_gpgcheck | ternary("", " trusted=yes") }}] {{ visual_studio_code_mirror }}/repos/code stable main'
      filename: vscode
      state: present
    when: not visual_studio_code_skip_add_repo

  - name: install VS Code (apt)
    become: true
    apt:
      name: "{{ visual_studio_code_package }}{{ (visual_studio_code_version | length > 0) | ternary('=' + visual_studio_code_version, '') }}"
      state: present
      
  # Download the latest mambaforge installer file if it does not already exist
  - name: Download mambaforge installer
    become: false
    get_url: 
      url: https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh
      dest: "{{ downloads_dir }}/Mambaforge-Linux-x86_64.sh"
    
  # Run the installer if mambaforge is not already installed
  - name: Install mambaforge
    become: false
    command: "/bin/bash {{ downloads_dir }}/Mambaforge-Linux-x86_64.sh -b"
    args:
      creates: "{{ home }}/mambaforge"
      
  # Initialize mamba
  - name: Init mamba
    become: false
    command: "{{ home }}/mambaforge/bin/mamba init"
        
  # Install Typora
  - name: install Typora key (apt)
    become: true
    apt_key:
      url: 'https://typora.io/linux/public-key.asc'
      state: present

  - name: install Typora repo (apt)
    become: true
    apt_repository:
      repo: 'deb https://typora.io/linux ./'
      filename: typora
      state: present

  - name: install Typora (apt)
    become: true
    apt:
      name: "typora"
      state: present
  
  # Install Docker
  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Update apt and install docker-ce
    apt:
      name: docker-ce
      state: latest
      update_cache: true

  - name: Install Docker Module for Python
    pip:
      name: docker
  
#   # Add Docker Image and Container Tasks
#   - name: Pull default Docker image
#     community.docker.docker_image:
#       name: "{{ default_container_image }}"
#       source: pull
  
#   - name: Create default containers
#     community.docker.docker_container:
#       name: "{{ default_container_name }}{{ item }}"
#       image: "{{ default_container_image }}"
#       command: "{{ default_container_command }}"
#       state: present
#     with_sequence: count={{ container_count }}

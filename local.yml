---

# tasks to complete before running roles
- hosts: localhost
  connection: local
  vars_files:
    - vars.yml
  # enable sudo
  become: true
  pre_tasks:
    - name: pre-run | Install aptitude and update package cache (debian, etc)
      tags: always
      apt: name=aptitude state=latest update_cache=true
      when: ansible_distribution in ["Debian", "Ubuntu"]
      
  tasks:
  - name: Install packages
    # Use the package module ot install packages
    apt:
      name:
        - wget
        - gpg
        - git
        - git-lfs
        - curl
        - apt-transport-https
        - ca-certificates
        - software-properties-common
        - virtualenv
        - python3-setuptools
        - xvfb
        # Need this for the dconf module
        - python3-psutil
        # Terminal
        - htop
        - iotop
        - tmux
        # Image editing
        - gimp
        - imagemagick
        - darktable
        # Digital Painting
#         - krita
        # Vecor Graphics
#         - inkscape
        # Media
        - vlc
        - audacity
        # Video Editing
        - ffmpeg
        - kdenlive
        - handbrake
      state: latest
      update_cache: true
  
  # Customize bash prompt
  - name: Customize bash prompt
    lineinfile:
      path: "{{ home }}/.bashrc"
      regexp: "^    PS1='\\${debian_chroot:\\+\\(\\$debian_chroot\\)}\\\\\\[\\\\033\\[01;32m\\\\\\]\\\\u@\\\\h\\\\\\[\\\\033\\[00m\\\\\\]:\\\\\\[\\\\033\\[01;34m\\\\\\]\\\\w\\\\\\[\\\\033\\[00m\\\\\\]\\\\\\$ '"
      line: "    PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\n\\$ '"
      backup: true
      
#   # Install Annotator image annotation tool
#   - name: Install Annotator repo
#     become: true
#     apt_repository:
#       repo: 'ppa:ubuntuhandbook1/annotator'
#       state: present
  
#   - name: Install Annotator
#     become: true
#     apt: 
#       name: com.github.phase1geo.annotator
#       state: present
#       update_cache: true
        
  # Install VS Code
  - name: install VS Code key (apt)
    become: true
    apt_key:
      url: '{{ visual_studio_code_mirror }}/keys/microsoft.asc'
      state: present

  - name: install VS Code repo (apt)
    become: true
    apt_repository:
      repo: 'deb [arch=amd64] {{ visual_studio_code_mirror }}/repos/code stable main'
      filename: vscode
      state: present

  - name: install VS Code (apt)
    become: true
    apt:
      name: "code"
      state: present
      
  # Download the latest mambaforge installer file if it does not already exist
  - name: Download mambaforge installer
    become: false
    get_url: 
      url: https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh
      dest: "{{ downloads_dir }}/Mambaforge-Linux-x86_64.sh"
    
  # Run the installer if mambaforge is not already installed
  - name: Install mambaforge
    become: false
    command: "/bin/bash {{ downloads_dir }}/Mambaforge-Linux-x86_64.sh -b"
    args:
      creates: "{{ home }}/mambaforge"
      
  # Initialize mamba
  - name: Init mamba
    become: false
    command: "{{ home }}/mambaforge/bin/mamba init"
        
  # Install Typora
  - name: install Typora key (apt)
    become: true
    apt_key:
      url: 'https://typora.io/linux/public-key.asc'
      state: present

  - name: install Typora repo (apt)
    become: true
    apt_repository:
      repo: 'deb https://typora.io/linux ./'
      filename: typora
      state: present

  - name: install Typora (apt)
    become: true
    apt:
      name: "typora"
      state: present
  
#   # Install Docker
#   - name: Add Docker GPG apt Key
#     apt_key:
#       url: https://download.docker.com/linux/ubuntu/gpg
#       state: present

#   - name: Add Docker Repository
#     apt_repository:
#       repo: deb https://download.docker.com/linux/ubuntu jammy stable
#       state: present

#   - name: Update apt and install docker-ce
#     apt:
#       name: docker-ce
#       state: latest
#       update_cache: true

#   - name: Install Docker Module for Python
#     pip:
#       name: docker
      
#   - name: Add nvidia-docker GPG apt Key
#     apt_key:
#       url: https://nvidia.github.io/nvidia-docker/gpgkey
#       state: present
  
#   - name: Download nvidia-docker Repository list
#     get_url: 
#       url: https://nvidia.github.io/nvidia-docker/ubuntu22.04/nvidia-docker.list
#       dest: "/etc/apt/sources.list.d/nvidia-docker.list"
      
#   - name: Install Nvidia Docker
#     apt:
#       name: nvidia-docker2
#       state: latest
#       update_cache: true
      
#   - name: Restart docker
#     service:
#       name: docker
#       state: restarted
  
#   # Add Docker Image and Container Tasks
#   - name: Pull default Docker image
#     community.docker.docker_image:
#       name: "{{ default_container_image }}"
#       source: pull
  
#   - name: Create default containers
#     community.docker.docker_container:
#       name: "{{ default_container_name }}{{ item }}"
#       image: "{{ default_container_image }}"
#       command: "{{ default_container_command }}"
#       state: present
#     with_sequence: count={{ container_count }}

#   # Auto update ansible config
#   - name: add ansible user
#     user:
#       name: ansibleuser
#       system: yes

#   - name: set up sudo for ansible user
#     copy:
#       src: files/sudoer_ansibleuser
#       dest: /etc/sudoers.d/ansibleuser
#       owner: root
#       group: root
#       mode: 0440

#   - name: add ansible-pull cron job
#     cron:
#       name: ansible auto-provision
#       user: ansibleuser
#       special_time: reboot
#       job: ansible-pull -o -U https://github.com/jlacroix82/ansible_pull_tutorial.git
